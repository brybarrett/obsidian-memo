{
  "edges": [
    {
      "fromNode": "2a6504df9f2cb9b1",
      "fromSide": "bottom",
      "id": "34e5500ade1109c4",
      "toNode": "8dd5c6335d5ac26f",
      "toSide": "top"
    },
    {
      "fromNode": "2a6504df9f2cb9b1",
      "fromSide": "bottom",
      "id": "489242ad06bc2f90",
      "toNode": "adfaefa08f4345c0",
      "toSide": "top"
    },
    {
      "fromNode": "2a6504df9f2cb9b1",
      "fromSide": "top",
      "id": "520f59f14c51d534",
      "toNode": "10afba8de29e4a77",
      "toSide": "right"
    }
  ],
  "nodes": [
    {
      "height": 746,
      "id": "adfaefa08f4345c0",
      "styleAttributes": {
      },
      "text": "### Ошибки/антипаттерны\n\n1\\. Вставка данных напрямую в SQL\nПример:\n```python\ncursor.execute(f\"SELECT * FROM users WHERE email = '{email}'\")\n```\nМожно уничтожить таблицу: \n```SQL\n'; DROP TABLE users; --\n```\n\n2\\. Отсутствие ограничений на уровне схемы\nПример:\n```SQL\nCREATE TABLE users (\n    id INTEGER PRIMARY KEY,\n    email TEXT, -- UNIQUE NOT NULL,\n    age INTEGER -- CHECK (age >= 0)\n);\n-- сюда легко вставить NULL, дубликаты, или отрицательный возраст\n```\n\n3\\. Отказ от использования внешних ключей\n4\\. Преждевременная или избыточная индексация\n5\\. Логика в SQL вместо кода\n6\\. Слишком много повторяющихся данных (денормализация)\n7\\. Использование DEFAULT NULL\n8\\. Отсутствие транзакций при нескольких связанных действиях\n9\\. Неиспользование инструментов миграции\n10\\. Нехватка тестов и проверок после операций с БД\n",
      "type": "text",
      "width": 615,
      "x": 198,
      "y": 371
    },
    {
      "height": 603,
      "id": "8dd5c6335d5ac26f",
      "styleAttributes": {
      },
      "text": "### Лучшие практики\n1\\. Проектирование и нормализация:\n- Нормализация\n- Нейминг\n- Внешние ключи (+ ON DELETE CASCADE)\n2\\. Типы данных и ограничения:\n- Правильные типы\n- Ограничения целостности (NOT NULL, UNIQUE, ...)\n3\\. Индексация (ускорение поиска, замедление добавления/удаления)\n4\\. Безопасность\n- Параметризованные запросы\n- Пароли в хэшированном виде\n- Ограничение прав пользователя\n5\\. Миграция и версии схем\n6\\. Транзакции\n7\\. Логика в приложении, а не SQL\n8\\. Бэкапы",
      "type": "text",
      "width": 487,
      "x": -431,
      "y": 371
    },
    {
      "height": 348,
      "id": "2a6504df9f2cb9b1",
      "styleAttributes": {
      },
      "text": "### Взаимодействие с БД\n- Проектирование схемы (определение таблиц, полей, типов данных, связь между таблицами)\n- CRUD-операции\n- Поиск и фильтрация\n- Оптимизация производительности\n- Безопасность и права доступа\n- Бэкапы, миграции, масштабирование",
      "type": "text",
      "width": 487,
      "x": -82,
      "y": -125
    },
    {
      "height": 907,
      "id": "10afba8de29e4a77",
      "styleAttributes": {
      },
      "text": "### Основные понятия\n1\\. DDL (Data Definition Language) - определение структуры данных, команды, с помощью которых создаются и изменяются таблицы, индексы, схемы\n`CREATE`, `ALTER`, `DROP` \n\n2\\. DML (Data Manipulation Language) - работа с данными внутри таблиц \n`SELECT`, `INSERT`, `UPDATE`, `DELETE`\n\n3\\. DCL (Data Control Language) - регулирует, кто может что делать в БД\n`GRANT`, `REVOKE`\n\n4\\. TCL (Transaction Control Language) - управление транзакциями\n`BEGIN` / `START TRANSACTION`, `COMMIT`, `ROLLBACK`, `SAVEPOINT`\n\n5\\. ACID-свойства (гарантии транзакций)\n- Atomicity (атомарность) - всё или ничего\n- Consistency (согласованность) - переход из одного конкретного состояния в другое\n- Isolation (согласованность) - параллельные транзакции не мешают друг другу\n- Durability (надёжность) - после `COMMIT` изменения не теряются\n\n6\\. Primary Key и Foreign Key\n- Primary Key - уникальный идентификатор строки в таблице\n- Foreign Key - ссылка на Primary Key в дугой таблице\n\n7\\. Индексы\n8\\. Нормализация\n9\\. ORM (Object-Relational Mapping) - связывает объекты в коде с таблицами БД",
      "type": "text",
      "width": 564,
      "x": -1017,
      "y": -560
    }
  ]
}