{
  "edges": [
    {
      "fromNode": "869b6abc256e90e7",
      "fromSide": "top",
      "id": "1861261a159c9f9a",
      "toNode": "6159047847190b94",
      "toSide": "bottom"
    },
    {
      "fromNode": "6159047847190b94",
      "fromSide": "top",
      "id": "8a5c4753a9a4ef11",
      "toNode": "82e0c4e5812104a1",
      "toSide": "bottom"
    },
    {
      "fromNode": "82e0c4e5812104a1",
      "fromSide": "top",
      "id": "87ad1509000f2c8e",
      "toNode": "55b5b9c3fbfe189d",
      "toSide": "bottom"
    },
    {
      "fromNode": "55b5b9c3fbfe189d",
      "fromSide": "right",
      "id": "fd2b544d21a90534",
      "label": "\n\n           data, onClose, onButtonClick",
      "toNode": "82e0c4e5812104a1",
      "toSide": "right"
    },
    {
      "fromNode": "82e0c4e5812104a1",
      "fromSide": "right",
      "id": "5fd90f0ae5f572e4",
      "label": "onClose",
      "toNode": "6159047847190b94",
      "toSide": "right"
    },
    {
      "fromNode": "6159047847190b94",
      "fromSide": "right",
      "id": "ce18c444df79ab47",
      "label": "title, checked, \nonChecked, onClose",
      "toNode": "869b6abc256e90e7",
      "toSide": "right"
    },
    {
      "fromNode": "55b5b9c3fbfe189d",
      "fromSide": "top",
      "id": "7d3c15d6f87f39ac",
      "toNode": "41b65f918f3a750d",
      "toSide": "bottom"
    },
    {
      "fromNode": "41b65f918f3a750d",
      "fromSide": "right",
      "id": "f389701c5a2ae081",
      "toNode": "55b5b9c3fbfe189d",
      "toSide": "right"
    }
  ],
  "nodes": [
    {
      "height": 396,
      "id": "6159047847190b94",
      "styleAttributes": {
      },
      "text": "Stateful BasicItem\n\n\tfun BasicItem(  \n\t    onClose: () -> Unit,  \n\t    modifier: Modifier = Modifier,  \n\t    title: String = \"\",  \n\t    colorPrimary: Color = colorPrimaryF,  \n\t    colorSecondary: Color = colorSecondaryF  \n\t {\n\t var checkedState by rememberSaveable { mutableStateOf(false) }  \n\t var titleState by rememberSaveable { mutableStateOf(title) }\n\t...\n\t }",
      "type": "text",
      "width": 665,
      "x": -493,
      "y": -659
    },
    {
      "height": 388,
      "id": "869b6abc256e90e7",
      "styleAttributes": {
      },
      "text": "Stateless BasicItem\n\n\tfun BasicItem(  \n\t    title: String,  \n\t    checked: Boolean,  \n\t    onCheckedChange: () -> Unit,  \n\t    onTextChange: (String) -> Unit,  \n\t    onClose: () -> Unit,  \n\t    modifier: Modifier = Modifier,  \n\t    colorPrimary: Color = colorPrimaryF,  \n\t    colorSecondary: Color = colorSecondaryF,  \n\t { ... }",
      "type": "text",
      "width": 576,
      "x": -448,
      "y": -233
    },
    {
      "height": 266,
      "id": "82e0c4e5812104a1",
      "styleAttributes": {
      },
      "text": "Column of items\n\n\tfun ColumnOfItems(  \n\t    list: List<Todo>,  \n\t    onClose: (Todo) -> Unit,  \n\t    onButtonClick: () -> Unit,  \n\t    modifier: Modifier = Modifier  \n\t) { //just a Surface + LazyColumn ... }",
      "type": "text",
      "width": 812,
      "x": -566,
      "y": -1042
    },
    {
      "height": 529,
      "id": "55b5b9c3fbfe189d",
      "styleAttributes": {
      },
      "text": "\tItemScreen\n\n\tfun ItemScreen(modifier: Modifier = Modifier) {  \n\t    Column(modifier = modifier) {  \n\t        val list = remember { getItems().toMutableStateList() }  \n\t        ColumnOfItems(  \n\t            list = list,  \n\t            onClose = { todo -> list.remove(todo) },  \n\t            onButtonClick = { list.add(Item(list.last().id + 1, \"Task # ${list.last().id + 1}\")) })  \n\t    }  \n\t}\n\n\tprivate fun getItems() = List(5) { i -> Item(i, \"Task # $i\")}",
      "type": "text",
      "width": 736,
      "x": -528,
      "y": -1701
    },
    {
      "height": 384,
      "id": "41b65f918f3a750d",
      "styleAttributes": {
      },
      "text": "ItemViewModel\n\t\n\tclass ItemViewModel: ViewModel() {  \n\t    private val _items = getItems().toMutableStateList()  \n\t    val items: List<Item>  \n\t        get() = _items  \n\t  \n\t    fun remove(item: Item) {  \n\t        _items.remove(item)  \n\t    }  \n\t  \n\t    fun add() {  \n\t        val id = _items.last().id + 1  \n\t        _items.add(Item(id, \"Task # $id\"))  \n\t    }  \n\t}",
      "type": "text",
      "width": 812,
      "x": -566,
      "y": -2230
    }
  ]
}