{
	"nodes":[
		{"id":"24ece9eebab099db","type":"text","text":"## Одномерные структуры данных","x":-500,"y":-180,"width":480,"height":60},
		{"id":"05defd1b644f1b38","type":"text","text":"### Простейшие алгоритмы \n\n1\\. Линейный проход\n- Поиск элемента\n- Поиск **максимума/минимума**\n- Подсчёт **числа вхождений** элемента\n- **Инверсия** массива\n- **Фильтрация** элементов (e.g. $x > 0$)\n- Проверка **упорядоченности**\n- Сравнение массивов\n\n2\\. Сортировка (за $O(n^2)$)","x":-940,"y":40,"width":440,"height":380},
		{"id":"98757c5e6c08799a","type":"text","text":"#### Обобщение\n\n- Простой линейный поиск/простая фильтрация:\n\t- Поиск одного элемента (первый индекс/все вхождения)\n\t- Минимум, максимум\n\t- Поиск элементов по условию\n- Агрегация значений\n\t- Подсчёт суммы/количества\n\t- Подсчёт статистик (среднее, медиана и т.д.)\n\t- Подсчёт частоты элементов\n- Простые операции/проверки:\n\t- Инверсия массива\n\t- Проверка упорядоченности\n\t- Сравнение массивов\n\t- Проверка на палиндром\n- Простые сортировки\n\t- Сортировка подсчётом для небольших массивов\n\t- Сортировка выбором (поиск минимального элемента в неотсортированной части)\n\t- Сортировка вставками (поиск места в очередной части для очередного элемента)\n\t- Сортировка пузырьком (тащим в конец элемент, который окажется максимальным в неотсортиованной части)","x":-1047,"y":586,"width":607,"height":674},
		{"id":"6407087a929cd83f","type":"text","text":"### Основные алгоритмы\n- Продвинутые сортировки\n- Хэширование\n- Два указателя\n- Скользящее окно\n- Префиксная сумма\n- Бинарный поиск\n- Стек, очередь, deque\n- Жадные стратегии\n- Частичные сортировки\n- Интервалы\n- Динамическое программирование","x":40,"y":40,"width":440,"height":380},
		{"id":"f4f7330908c02bc2","type":"text","text":"#### Хэширование\n\n**Easy**: \n- `if_unique`\n- `second_occ`\n- `is_anagrams`\n- `count_words`\n- `most_freq_letter`\n- `remove_duplicates`\n- `two_lists_intersection`\n- `zero_sum`\n- `containsNearbyDuplicate`","x":-243,"y":580,"width":403,"height":680},
		{"id":"958a8fb1074cffe1","type":"text","text":"# Yandex\n","x":-1920,"y":-180,"width":220,"height":60},
		{"id":"e2ec0b9e86ed650a","type":"text","text":"### Summary ranges\n\n1\\. Более длинное\n```python\ndef summary_ranges(nums):\n\tnums.sort()\n    ans = []\n    l = r = 0\n    while r < len(nums) - 1:\n        if nums[r + 1] - nums[r] == 1:\n             r += 1\n        else:\n             if l == r:\n                 ans.append(f”{nums[r]}”)\n             else:\n                 ans.append(f”{nums[l]}->{nums[r]}”)\n             r += 1\n             l = r\n     if l == r:\n          ans.append(f”{nums[r]}”)\n     else:\n          ans.append(f”{nums[l]}->{nums[r]}”)\n      return ans\n\n```\n\n2\\. Немного короче, но всё равно с проверкой в конце \n```python\ndef summary_ranges(nums):\n    ans = []\n    start = nums[0]\n    for i in range(1, len(nums)):\n        if nums[i] != nums[i - 1] + 1:\n            if start == nums[i]:\n                ans.append(f”{start}”)\n            else:\n                 ans.append(f”{start}->{nums[i - 1]}”)\n            start = nums[i]\n    if start == nums[i]:\n        ans.append(f”{start}”)\n    else:\n        ans.append(f”{start}->{nums[-1]}”)\n    return ans\n```","x":-3380,"y":40,"width":660,"height":960},
		{"id":"5709607531611b33","type":"text","text":"### Valid palindrome\n\n```python\ndef valid_palindrome(s):\n    l = 0\n    r = len(s) - 1\n    while r > l:\n        if not s[l].isalnum():\n            l += 1\n        elif not s[r].isalnum():\n            r -= 1\n        else:\n            if s[l].lower() != s[r].lower():\n                return False\n            l += 1\n            r -= 1\n    return True\n```","x":-2660,"y":40,"width":540,"height":443},
		{"id":"477b7809cbd61a19","type":"text","text":"### Move zeros\n(на плюсах быстрее с проверкой i != p)\n\n```python\ndef move_zeros(nums):\n    p = 0\n    for i in range(len(nums)):\n        if nums[i] != 0:\n            if i != p:\n                nums[i], nums[p] = nums[p], nums[i]\n            p += 1\n```","x":-2660,"y":540,"width":540,"height":300},
		{"id":"a3ea9c935ea7b35c","type":"text","text":"#### Обобщение\nОбщее:\n- Быстрый поиск и обновление\n- Подсчёт элементов\n- Хэширование подмассивов/подстрок\n\nЧастное:\n- Элемент массива как ключ\n- Строка/кортеж как ключ\n- Префиксная сумма\n- Операции со множествами","x":-376,"y":1820,"width":576,"height":380},
		{"id":"12ab4743e649289f","type":"text","text":"#### Паттерны\n\n- Быстрый поиск с обновлением set/dict на каждой итерации\n- Элемент массива как ключ в словаре (e.g. 2Sum)\n- Хэширование подмассивов/подстрок для сравнения\n- Хэширование по строке, кортежу\n- Подсчёт элементов\n- Комбинация с префиксной суммой\n- Операции с множествами","x":-376,"y":1360,"width":576,"height":326},
		{"id":"6f060787eb6b155e","type":"text","text":"### Два указателя / скользящее окно\n\n**1\\.** **Два указателя**\n**Идея**: использовать два индекса для одновременного обхода структуры данных\nВажно! Возможно, с разной скоростью | в разных направлениях\nПрименение:\n- Сортированные массивы\n- Обход с двух концов (палиндром, reverse)\n- Удаление дубликатов in-place\n- Объединение двух отсортированных массивов\nВарианты:\n- Fast & slow\n- Opposite direction\n- Same direction\n\n**2\\.** **Скользящее окно**\n**Идея**: поддерживать подмассив/подстроку фиксированной или переменной длины, двигая границы окна (`left`, `right`) и **поддерживая инвариант** (e.g. сумма, количество уникальных символов)\nПрименение:\n- Максимум/сумма/среднее в подмассиве\n- Минимальная подстрока, удовлетворяющая условию\n- Длина наибольшего подмассива с уникальными элементами\n- Частотный анализ, частотные карты\n\n**Сложности и тонкости**\n- Нужно сделить за выходом за границы\n- Не пропустить нужные комбинации (e.g. `left == right` или `left < right`)\n- Понять, сдвигать указатель до или после логики","x":280,"y":580,"width":760,"height":920},
		{"id":"3208b90e1e552311","type":"text","text":"### Проблемные задачи\nEasy:\n- Reverse Linked List $\\pm$\n\nMedium:\n- Maximum subarray\n- Minimum size subarray sum\n- Longest Repeating Character Replacement","x":-3300,"y":1400,"width":860,"height":400},
		{"id":"4dd1d93560d87242","type":"text","text":"|                                                                                                                                                |              |             |          |     |\n| ---------------------------------------------------------------------------------------------------------------------------------------------- | ------------ | ----------- | -------- | --- |\n| **Название**                                                                                                                                   | **Принятие** | **Уровень** | **Done** |     |\n| [Line Reflection](https://leetcode.com/problems/line-reflection)                                                                               | 34.20%       | Medium      |          |     |\n| [Longest Subarray of 1’s After Deleting One Element](https://leetcode.com/problems/longest-subarray-of-1s-after-deleting-one-element)          | 60.00%       | Medium      | +-       |     |\n| [Summary Ranges](https://leetcode.com/problems/summary-ranges)                                                                                 | 44.50%       | Easy        | +        |     |\n| [String Compression](https://leetcode.com/problems/string-compression)                                                                         | 46.90%       | Medium      | +--      |     |\n| [Zigzag Iterator](https://leetcode.com/problems/zigzag-iterator)                                                                               | 61.00%       | Medium      |          |     |\n| [Valid Palindrome](https://leetcode.com/problems/valid-palindrome)                                                                             | 40.70%       | Easy        | +        |     |\n| [One Edit Distance](https://leetcode.com/problems/one-edit-distance)                                                                           | 33.80%       | Medium      |          |     |\n| [Subarray Sum Equals K](https://leetcode.com/problems/subarray-sum-equals-k)                                                                   | 43.80%       | Medium      |          |     |\n| [Move Zeroes](https://leetcode.com/problems/move-zeroes)                                                                                       | 60.10%       | Easy        | +        |     |\n| [Group Anagrams](https://leetcode.com/problems/group-anagrams)                                                                                 | 63.20%       | Medium      |          |     |\n| [Insert Delete GetRandom O(1)](https://leetcode.com/problems/insert-delete-getrandom-o1)                                                       | 51.00%       | Medium      |          |     |\n| [LRU Cache](https://leetcode.com/problems/lru-cache)                                                                                           | 39.10%       | Medium      |          |     |\n| [Generate Parentheses](https://leetcode.com/problems/generate-parentheses)                                                                     | 69.20%       | Medium      |          |     |\n| [Reverse Linked List](https://leetcode.com/problems/reverse-linked-list)                                                                       | 69.20%       | Easy        | +-       |     |\n| [Permutation in String](https://leetcode.com/problems/permutation-in-string)                                                                   | 44.10%       | Medium      | +-       |     |\n| [Merge k Sorted Lists](https://leetcode.com/problems/merge-k-sorted-lists)                                                                     | 45.80%       | Hard        |          |     |\n| [Number of Recent Calls](https://leetcode.com/problems/number-of-recent-calls)                                                                 | 73.00%       | Easy        | +        |     |\n| [Valid Parentheses](https://leetcode.com/problems/valid-parentheses)                                                                           | 40.60%       | Easy        | +        |     |\n| [Max Consecutive Ones II](https://leetcode.com/problems/max-consecutive-ones-ii)                                                               | 48.60%       | Medium      |          |     |\n| [Maximize Distance to Closest Person](https://leetcode.com/problems/maximize-distance-to-closest-person)                                       | 47.40%       | Medium      |          |     |\n| [Design Hit Counter](https://leetcode.com/problems/design-hit-counter)                                                                         | 66.90%       | Medium      |          |     |\n| [Merge Intervals](https://leetcode.com/problems/merge-intervals)                                                                               | 44.20%       | Medium      |          |     |\n| [Trapping Rain Water](https://leetcode.com/problems/trapping-rain-water)                                                                       | 55.40%       | Hard        |          |     |\n| [Two Sum](https://leetcode.com/problems/two-sum)                                                                                               | 48.20%       | Easy        | +        |     |\n| [Meeting Rooms II](https://leetcode.com/problems/meeting-rooms-ii)                                                                             | 49.10%       | Medium      |          |     |\n| [Find All Anagrams in a String](https://leetcode.com/problems/find-all-anagrams-in-a-string)                                                   | 47.10%       | Medium      | +-       |     |\n| [Implement Rand10() Using Rand7()](https://leetcode.com/problems/implement-rand10-using-rand7)                                                 | 46.60%       | Medium      |          |     |\n| [Symmetric Tree](https://leetcode.com/problems/symmetric-tree)                                                                                 | 50.90%       | Easy        |          |     |\n| [Longest Substring Without Repeating Characters](https://leetcode.com/problems/longest-substring-without-repeating-characters)                 | 32.70%       | Medium      | +        |     |\n| [Validate Binary Search Tree](https://leetcode.com/problems/validate-binary-search-tree)                                                       | 30.10%       | Medium      |          |     |\n| [Number of Islands](https://leetcode.com/problems/number-of-islands)                                                                           | 52.90%       | Medium      | +--      |     |\n| [Flatten Nested List Iterator](https://leetcode.com/problems/flatten-nested-list-iterator)                                                     | 58.00%       | Medium      |          |     |\n| [Consecutive Characters](https://leetcode.com/problems/consecutive-characters)                                                                 | 62.00%       | Easy        | +        |     |\n| [Interval List Intersections](https://leetcode.com/problems/interval-list-intersections)                                                       | 70.70%       | Medium      |          |     |\n| [Implement Queue using Stacks](https://leetcode.com/problems/implement-queue-using-stacks)                                                     | 56.60%       | Easy        |          |     |\n| [Add Two Numbers](https://leetcode.com/problems/add-two-numbers)                                                                               | 37.70%       | Medium      |          |     |\n| [Merge Sorted Array](https://leetcode.com/problems/merge-sorted-array)                                                                         | 43.00%       | Easy        |          |     |\n| [Merge Two Sorted Lists](https://leetcode.com/problems/merge-two-sorted-lists)                                                                 | 59.10%       | Easy        |          |     |\n| [Max Consecutive Ones III](https://leetcode.com/problems/max-consecutive-ones-iii)                                                             | 62.30%       | Medium      |          |     |\n| [Longest Palindromic Substring](https://leetcode.com/problems/longest-palindromic-substring)                                                   | 31.60%       | Medium      |          |     |\n| [Jewels and Stones](https://leetcode.com/problems/jewels-and-stones)                                                                           | 87.50%       | Easy        |          |     |\n| [Lowest Common Ancestor of a Binary Tree](https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree)                               | 54.00%       | Medium      |          |     |\n| [Intersection of Two Arrays II](https://leetcode.com/problems/intersection-of-two-arrays-ii)                                                   | 54.40%       | Easy        | +        |     |\n| [Missing Number](https://leetcode.com/problems/missing-number)                                                                                 | 58.50%       | Easy        | +        |     |\n| [Evaluate Reverse Polish Notation](https://leetcode.com/problems/evaluate-reverse-polish-notation)                                             | 41.40%       | Medium      |          |     |\n| [Median of Two Sorted Arrays](https://leetcode.com/problems/median-of-two-sorted-arrays)                                                       | 33.50%       | Hard        |          |     |\n| [Simplify Path](https://leetcode.com/problems/simplify-path)                                                                                   | 37.20%       | Medium      |          |     |\n| [Is Subsequence](https://leetcode.com/problems/is-subsequence)                                                                                 | 50.10%       | Easy        | $\\pm$    |     |\n| [Squares of a Sorted Array](https://leetcode.com/problems/squares-of-a-sorted-array)                                                           | 71.50%       | Easy        | +        |     |\n| [Remove Nth Node From End of List](https://leetcode.com/problems/remove-nth-node-from-end-of-list)                                             | 37.70%       | Medium      |          |     |\n| [Perfect Squares](https://leetcode.com/problems/perfect-squares)                                                                               | 51.50%       | Medium      |          |     |\n| [Max Stack](https://leetcode.com/problems/max-stack)                                                                                           | 44.70%       | Easy        |          |     |\n| [Lowest Common Ancestor of a Binary Tree III](https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree-iii)                       | 77.50%       | Medium      |          |     |\n| [Longest Substring with At Most Two Distinct Characters](https://leetcode.com/problems/longest-substring-with-at-most-two-distinct-characters) | 52.20%       | Medium      |          |     |\n| [Maximal Rectangle](https://leetcode.com/problems/maximal-rectangle)                                                                           | 42.10%       | Hard        |          |     |\n| [Search in Rotated Sorted Array](https://leetcode.com/problems/search-in-rotated-sorted-array)                                                 | 37.30%       | Medium      |          |     |\n| [Two Sum II – Input Array Is Sorted](https://leetcode.com/problems/two-sum-ii-input-array-is-sorted)                                           | 58.00%       | Easy        | +        |     |\n| [Remove Duplicates from Sorted Array](https://leetcode.com/problems/remove-duplicates-from-sorted-array)                                       | 48.10%       | Easy        | +        |     |\n| [Find Minimum in Rotated Sorted Array](https://leetcode.com/problems/find-minimum-in-rotated-sorted-array)                                     | 47.60%       | Medium      |          |     |\n| [Range Sum of BST](https://leetcode.com/problems/range-sum-of-bst)                                                                             | 84.70%       | Easy        |          |     |\n| [Partition Labels](https://leetcode.com/problems/partition-labels)                                                                             | 78.60%       | Medium      |          |     |\n| [Product of Array Except Self](https://leetcode.com/problems/product-of-array-except-self)                                                     | 63.40%       | Medium      |          |     |\n| [Binary Tree Maximum Path Sum](https://leetcode.com/problems/binary-tree-maximum-path-sum)                                                     | 37.20%       | Hard        |          |     |\n| [Continuous Subarray Sum](https://leetcode.com/problems/continuous-subarray-sum)                                                               | 26.70%       | Medium      |          |     |\n| [Reverse Words in a String III](https://leetcode.com/problems/reverse-words-in-a-string-iii)                                                   | 77.20%       | Easy        |          |     |\n| [Add Strings](https://leetcode.com/problems/add-strings)                                                                                       | 51.50%       | Easy        |          |     |\n| [Palindrome Linked List](https://leetcode.com/problems/palindrome-linked-list)                                                                 | 45.50%       | Easy        |          |     |\n| [First Unique Character in a String](https://leetcode.com/problems/first-unique-character-in-a-string)                                         | 56.40%       | Easy        | $\\pm$?   |     |\nсы задач. Вот общая картина:\n\n                    ","x":-4879,"y":-3,"width":1019,"height":2343}
	],
	"edges":[
		{"id":"294797a9ded3a9ee","fromNode":"24ece9eebab099db","fromSide":"bottom","toNode":"05defd1b644f1b38","toSide":"top"},
		{"id":"1d0285dc985ab710","fromNode":"05defd1b644f1b38","fromSide":"bottom","toNode":"98757c5e6c08799a","toSide":"top"},
		{"id":"5adaa77306f0d100","fromNode":"24ece9eebab099db","fromSide":"bottom","toNode":"6407087a929cd83f","toSide":"top"},
		{"id":"d433716a62125eee","fromNode":"6407087a929cd83f","fromSide":"bottom","toNode":"f4f7330908c02bc2","toSide":"top"},
		{"id":"599b24f0267d6e4e","fromNode":"f4f7330908c02bc2","fromSide":"bottom","toNode":"12ab4743e649289f","toSide":"top"},
		{"id":"b4dd654c0c3e319c","fromNode":"958a8fb1074cffe1","fromSide":"bottom","toNode":"e2ec0b9e86ed650a","toSide":"top"},
		{"id":"3a123d31344da209","fromNode":"958a8fb1074cffe1","fromSide":"bottom","toNode":"5709607531611b33","toSide":"top"},
		{"id":"06696842edbd306a","fromNode":"958a8fb1074cffe1","fromSide":"bottom","toNode":"477b7809cbd61a19","toSide":"top"},
		{"id":"379100ca3468da2c","fromNode":"12ab4743e649289f","fromSide":"bottom","toNode":"a3ea9c935ea7b35c","toSide":"top"},
		{"id":"238b253bbe82ecf1","fromNode":"6407087a929cd83f","fromSide":"bottom","toNode":"6f060787eb6b155e","toSide":"top"}
	]
}